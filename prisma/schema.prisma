datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  travelPlans   TravelPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model TravelPlan {
  id        String      @id @default(cuid())
  location  String
  days      Int
  people    Int
  budget    String
  hotels    Hotel[]
  itinerary Itinerary[]
  userId    String
  user      User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hotel {
  id           String     @id @default(cuid())
  name         String
  price        Int
  latitude     String
  longitude    String
  rating       Float
  description  String
  travelPlanId String
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Itinerary {
  id           String     @id @default(cuid())
  day          Int
  travelPlanId String
  places       Place[]
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id              String    @id @default(cuid())
  name            String
  details         String
  latitude        String
  longitude       String
  tickerPricing   String
  travelTime      String
  bestTimeToVisit String
  itineraryId     String
  itinerary       Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}
